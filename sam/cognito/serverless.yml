# Copyright (c) 1999-2018 Logitech, Inc.  All Rights Reserved
#
# This program is a trade secret of LOGITECH, and it is not to
# be reproduced, published, disclosed to others, copied,
# adapted, distributed or displayed without the prior
# authorization of LOGITECH.
#
# Licensee agrees to attach or embedded this notice on all copies
# of the program, including partial copies or modified versions
# thereof.
#
# -------------------------------------------------------------
# DESCRIPTION
# -------------------------------------------------------------
# User table for storage user data including UserId, Company,
# Policy, todo
# DeviceOwnerID used as an index to query the user which belongs
# to the DeviceOwnerID, it could be used for user management,
# including CRUD  manipulate
#
# -------------------------------------------------------------
# AUTHOR
# -------------------------------------------------------------
# Cenxui Lin (clin9@logitech.com)
# -------------------------------------------------------------
# DATE CREATED
# -------------------------------------------------------------
# 16 July 2018


service: cognito-user

provider:
  name: aws
  region: ${opt:region, 'ap-northeast-1'}
  stage: ${opt:stage, 'dev'}

# AWS CloudFormation templates
resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: {Fn::Join : ["", ["${self:service}", "-", "${self:provider.stage}"]]}
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
#        Schema:
#          - Name: email
#            Required: true
#          - Name: preferred_username
#            Required: true
#            Mutable: true
#          - Name: user
#            AttributeDataType: String
#            Mutable: true
#          - Name: role
#            AttributeDataType: String
#            Mutable: true
#          - Name: dept
#            AttributeDataType: String
#            Mutable: true

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: School #todo
        GenerateSecret: false
        UserPoolId:
          Ref: UserPool
        ExplicitAuthFlows: [USER_PASSWORD_AUTH]

    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: {Fn::Join : ["", ["IdentityPool", "${self:provider.stage}"]]}
        AllowUnauthenticatedIdentities: false
#        DeveloperProviderName: String
#        SupportedLoginProviders:
#          String: String
#        CognitoIdentityProviders:
#          - CognitoIdentityProvider
#        SamlProviderARNs:
#          - String
#        OpenIdConnectProviderARNs:
#          - String
#        CognitoStreams:
#          - CognitoStreams
#        PushSync:
#          - PushSync
#        CognitoEvents:
#          String: String

    AuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: {Fn::Join : ["-", ['CognitoAuth','${self:service}', '${self:provider.stage}']]}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
    UnAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: {Fn::Join : ["-", ['CognitoUnAuth','${self:service}', '${self:provider.stage}']]}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated

    IdentityPoolRoleMap:
    # Created to map Auth and Unauth roles to the identity pool
    # Depends on Identity Pool for ID ref
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          unauthenticated: {Fn::GetAtt : ['UnAuthRole', 'Arn'] }
          authenticated: {Fn::GetAtt : ['AuthRole', 'Arn'] }
      DependsOn: IdentityPool

  Outputs:
    UserPoolRegion:
      Description: Cognito user region
      Value:
        Ref: AWS::Region
      Export:
        Name: {Fn::Join: ['-', [Ref: AWS::StackName, UserPoolRegion]]}
    UserPoolId:
      Description: Cognito user pool ID
      Value:
        Ref: UserPool
      Export:
        Name: {Fn::Join: ['-', [Ref: AWS::StackName, UserPoolId]]}
    UserPoolArn:
      Description: Cognito user pool ID
      Value: {'Fn::GetAtt': UserPool.Arn}
      Export:
        Name: {Fn::Join: ['-', [Ref: AWS::StackName, UserPoolArn]]}
    ClientId:
      Description: Cognito user pool client ID for app backend
      Value:
        Ref: UserPoolClient
      Export:
        Name: {Fn::Join: ['-', [Ref: AWS::StackName, ClientId]]}
    IdentityPoolId:
      Description: Cognito identity pool ID
      Value:
        Ref: IdentityPool
      Export:
        Name: {Fn::Join: ['-', [Ref: AWS::StackName, IdentityPoolId]]}