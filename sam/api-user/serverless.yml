# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: api-user # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: ">=1.28.0 <2.0.0"

provider:
  name: aws
  runtime: go1.x
  region: ${opt:region, 'ap-northeast-1'}
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: { "Fn::Join" : ["", ["arn:aws:dynamodb:","${self:provider.region}", ":*:*" ] ]  }

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  userList:
    handler: bin/userList
    events:
      - http:
          path: user
          method: get
          cors: true
  userGet:
    handler: bin/userGet
    events:
      - http:
          path: user/{userid}
          method: get
          cors: true
  userPut:
    handler: bin/userPut
    events:
      - http:
          path: user
          method: put
          cors: true
  userPost:
    handler: bin/userPost
    events:
      - http:
          path: user
          method: post
          cors: true
  userDelete:
    handler: bin/userDelete
    events:
      - http:
          path: user/{userid}
          method: delete
          cors: true
  groupList:
    handler: bin/groupList
    events:
      - http:
          path: group
          method: get
          cors: true
  groupGet:
    handler: bin/groupGet
    events:
      - http:
          path: group/{groupid}
          method: get
          cors: true
  groupPut:
    handler: bin/groupPut
    events:
      - http:
          path: group
          method: put
          cors: true
  groupPost:
    handler: bin/groupPost
    events:
      - http:
          path: group
          method: post
          cors: true
  groupDelete:
    handler: bin/groupDelete
    events:
      - http:
          path: group/{groupid}
          method: delete
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
